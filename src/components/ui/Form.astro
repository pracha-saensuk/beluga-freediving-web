---
import type { Form, Input, Select } from '~/types';
import Button from '~/components/ui/Button.astro';
import {SITE} from '~/utils/config';
const { redirectUrl, actionUrl } = SITE.applyForm;
const { inputs, textarea, disclaimer, button = 'Contact us', description = '',} = Astro.props as Form;
---
<apply-form  data-redirect-url={redirectUrl} data-action-url={actionUrl}>
<form id="registerForm">
  {
    inputs &&
      inputs.map(
        (input) => { 
            if (input.type === 'select'){
              const {name, label, options} = input as Select;
              return name && (
                <div class="mb-4">
                {label && (
                <label for={name} class="block text-sm font-medium">
                  {label} {input.required && (<span class="text-red-500">*</span>)}
                </label>
              )}
            <div class="relative inline-block w-full">
              
              
              <select
              form="registerForm"
                id={name}
                name={name}
                class="appearance-none py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900 focus:outline-none" 
              >
              
              {options.map((option)=>{
                return <option value={option}>{option}</option>
              })}
              </select>
              <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center justify-end pr-2 text-gray-700">
        <svg class="fill-current h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M5.9 7l4.1 4.1 4.1-4.1 1.4 1.4-5.5 5.5-5.5-5.5z"/></svg>
    </div>
    
            </div></div>)
            }else if(input.type === 'radio'){
              const {name, label, options} = input as Input;
              return  <fieldset class="mb-4">
              <legend class="block text-sm font-medium">{label} {input.required && (<span class="text-red-500">*</span>)}</legend>
                <div>{options?.map( option=>(<input class="mr-1" type="radio" value={option} id={option} name={name}/><label class="mr-4" for={option}>{option}</label>))}</div></fieldset>
            }else{
              const inputProps = { label: '', autocomplete: 'on', placeholder: '' , ...input} as Input;
            const { name, label} = inputProps;
            return name && (
            <div class="mb-6">
              {label && (
                <label for={name} class="block text-sm font-medium">
                  {label} {input.required && (<span class="text-red-500">*</span>)}
                </label>
              )}
              <input
                id={name}
                {...inputProps}
                class="py-3 px-4 block w-full text-md rounded-lg border valid:border-gray-200 border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900"
              />
            </div>
          )
            }
            }
      )
  }

  {
    textarea && (
      <div>
        <label for="textarea" class="block text-sm font-medium">
          {textarea.label}
        </label>
        <textarea
          id="textarea"
          name="textarea"
          rows={textarea.rows ? textarea.rows : 4}
          placeholder={textarea.placeholder}
          class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900"
        />
      </div>
    )
  }

  {
    disclaimer && (
      <div class="mt-3 flex items-start">
        <div class="flex mt-0.5">
          <input
            id="disclaimer"
            name="disclaimer"
            type="checkbox"
            class="cursor-pointer mt-1 py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900"
          />
        </div>
        <div class="ml-3">
          <label for="disclaimer" class="cursor-pointer select-none text-sm text-gray-600 dark:text-gray-400">
            {disclaimer.label}
          </label>
        </div>
      </div>
    )
  }

  {
    button && (
      <div class="mt-10 grid">
        <Button variant="primary" type="submit">{button}</Button>
      </div>
    )
  }

  {
    description && (
      <div class="mt-3 text-center">
        <p class="text-sm text-gray-600 dark:text-gray-400">{description}</p>
      </div>
    )
  }
</form>
</apply-form>
<script>
  // This script will run in the browser, not during Astro's build process
  import {getTrackingObject} from '~/utils/webUtils';
  // import {SITE} from '~/utils/config';
//   import liff from '@line/liff';
//   liff.init({
//     liffId: '2002539170-xdV7V55g', // Use own liffId
//     withLoginOnExternalBrowser: true, // Enable automatic login process
// }).then(() => {
//     // Start to use liff's api
// });
  class ApplyForm extends HTMLElement{
    constructor(){
      super();
      const redirectUrl = this.dataset.redirectUrl!;
      const actionUrl = this.dataset.actionUrl!;
      const form = document.getElementById('registerForm') as HTMLFormElement;
      form.addEventListener('submit', (event: Event) => {
          event.preventDefault(); // Prevent the default form submission

          const formData = new FormData(form);
          const formDataObj = Object.fromEntries(formData.entries());
          const trackingObject = getTrackingObject();
         // console.log({...formDataObj, trackingObject});
          const data = {...formDataObj, trackingObject};
          fetch(actionUrl, {
            method: 'POST', // Specify the method
            headers: {
              'Content-Type': 'application/json', // Specify the content type as JSON
            },
            body: JSON.stringify(data), // Convert the JavaScript object to a JSON string
          })
          .then(response => {
            console.log(response);
            window.location.replace(redirectUrl);

          })
          .catch(error => {
            console.error('Error:', error); // Handle errors
          });
      });
    }
  }
  customElements.define('apply-form',ApplyForm)
  // document.addEventListener('DOMContentLoaded', () => {
      
  // });
</script>
